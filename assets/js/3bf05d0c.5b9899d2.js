"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[4494],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return f}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(t),f=o,m=d["".concat(p,".").concat(f)]||d[f]||u[f]||a;return t?r.createElement(m,i(i({ref:n},l),{},{components:t})):r.createElement(m,i({ref:n},l))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},21330:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return p},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},ExampleChart:function(){return d},default:function(){return m}});var r=t(87462),o=t(63366),a=t(67294),i=t(3905),s=["components"],p={id:"config-file",title:"Config Files",layout:"Guide",order:3},c=void 0,l={unversionedId:"config-file",id:"config-file",title:"Config Files",description:"export const ExampleChart = () => {",source:"@site/docs/config-file.mdx",sourceDirName:".",slug:"/config-file",permalink:"/docs/config-file",editUrl:"https://github.com/cssnano/cssnano/edit/master/site/docs/config-file.mdx",tags:[],version:"current",lastUpdatedBy:"Ludovico Fischer",lastUpdatedAt:1626708899,formattedLastUpdatedAt:"7/19/2021",frontMatter:{id:"config-file",title:"Config Files",layout:"Guide",order:3},sidebar:"docs",previous:{title:"Getting started",permalink:"/docs/getting-started"},next:{title:"Optimisations",permalink:"/docs/what-are-optimisations"}},u=[{value:"Configure through PostCSS configuration files",id:"configure-through-postcss-configuration-files",children:[],level:2},{value:"Configure through dedicated <code>cssnano</code> configuration",id:"configure-through-dedicated-cssnano-configuration",children:[],level:2},{value:"Options",id:"options",children:[{value:"<code>preset</code>",id:"preset",children:[],level:3},{value:"<code>plugins</code>",id:"plugins",children:[],level:3}],level:2}],d=function(){return(0,a.useEffect)((function(){var e=document.querySelector(".carbon_ads_mdx_wrapper"),n=document.createElement("script");n.src="//cdn.carbonads.com/carbon.js?serve=CEBI62JN&placement=cssnanoco",n.async=!0,n.id="_carbonads_js",e.appendChild(n)})),(0,i.kt)("div",{className:"carbon_ads_mdx_wrapper"})},f={toc:u,ExampleChart:d};function m(e){var n=e.components,t=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(d,{mdxType:"ExampleChart"}),(0,i.kt)("p",null,"You can configure cssnano either in the PostCSS configuration file or in a dedicated cssnano configuration file. The PostCSS configuration file takes precedence over the dedicated cssnano configuration.\nIf you don't pass any configuration, cssnano runs with the ",(0,i.kt)("inlineCode",{parentName:"p"},"default")," preset."),(0,i.kt)("h2",{id:"configure-through-postcss-configuration-files"},"Configure through PostCSS configuration files"),(0,i.kt)("p",null,"In the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/postcss/postcss#usage"},"PostCSS configuration file"),", you can pass both the ",(0,i.kt)("inlineCode",{parentName:"p"},"preset")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"plugins")," options when you add ",(0,i.kt)("inlineCode",{parentName:"p"},"cssnano")," to the PostCSS plugins. For example, if you use PostCSS programmatically, the following uses cssnano with the ",(0,i.kt)("inlineCode",{parentName:"p"},"lite")," preset and adds autoprefixer."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import postcss from 'postcss';\nimport cssnano from 'cssnano';\nimport litePreset from 'cssnano-preset-lite';\nimport autoprefixer from 'autoprefixer';\nconst preset = litePreset({ discardComments: false });\n\npostcss([cssnano({ preset, plugins: [autoprefixer] })]).process(\"/* Your CSS here */\")\n")),(0,i.kt)("h2",{id:"configure-through-dedicated-cssnano-configuration"},"Configure through dedicated ",(0,i.kt)("inlineCode",{parentName:"h2"},"cssnano")," configuration"),(0,i.kt)("p",null,"If you cannot configure cssnano in the PostCSS configuration file, you can configure cssnano with a cssnano configuration option in ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," or with a dedicated configuration file. This file can be in different formats."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".cssnanorc.config.json")," and ",(0,i.kt)("inlineCode",{parentName:"li"},".cssnanorc")," must contain a JSON object"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cssnano.config.js")," must export the configuration as a JavaScript object")),(0,i.kt)("h2",{id:"options"},"Options"),(0,i.kt)("h3",{id:"preset"},(0,i.kt)("inlineCode",{parentName:"h3"},"preset")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Type:")," ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"function")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"[string, Objects<preset options here>]")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"[function(preset options here)]"))),(0,i.kt)("p",null,"Pass a preset to choose a pre-configured set of optimizations. You can either import the preset package or use the preset name as a string."),(0,i.kt)("p",null,"With the preset as import:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"cssnano({ preset: require('cssnano-preset-default') })\n")),(0,i.kt)("p",null,"Using a string is useful if you use a configuration file in the JSON format.\nWhen you use a string, if the preset is called ",(0,i.kt)("inlineCode",{parentName:"p"},"cssnano-preset-<name>"),", use ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," alone:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"cssnano({ preset: 'default' })\n")),(0,i.kt)("p",null,"Presets themselves can take options.\nPass options to the preset by using an array where the first element is the preset and the second is an object with the preset options.\nYou can specify a preset with the preset name as a string or by passing the result of importing the preset package."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// cssnano.config.js\nmodule.exports = {\n  preset: [ require('cssnano-preset-default'), { discardComments: false } ]\n};\n")),(0,i.kt)("p",null,"You can also pass preset options when you use the preset name as a string:\nFor example, here's how to deactivate the ",(0,i.kt)("inlineCode",{parentName:"p"},"discardComments")," plugin when using the ",(0,i.kt)("inlineCode",{parentName:"p"},"advanced")," preset:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"cssnano({ preset: ['advanced', { discardComments: false }] })\n")),(0,i.kt)("h3",{id:"plugins"},(0,i.kt)("inlineCode",{parentName:"h3"},"plugins")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Type:")," ",(0,i.kt)("inlineCode",{parentName:"li"},"Array<'string' | 'function' | ['string' | 'function', Object<Options for the plugin here>]>"))),(0,i.kt)("p",null,"In addition to the preset, you can pass a list of plugins to cssnano.\nThis is equivalent to adding the plugins after cssnano in the PostCSS plugins array.\nIf you want to configure the individual plugins, use an array of arrays:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"cssnano({ plugins: [['autoprefixer', {}]] })\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// cssnano.config.js\nmodule.exports = {\n  plugins: [require('autoprefixer')]\n  \n  // or\n  plugins: ['autoprefixer', 'postcss-preset-env']\n  \n  // or\n  plugins: [ \n    ['autoprefixer', { remove: false }],\n  ]\n\n  // or\n  plugins: [\n    [ require('autoprefixer'), {remove: false} ],\n    [ 'postcss-preset-env']\n  ]\n}\n")))))}m.isMDXComponent=!0}}]);